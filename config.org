* packages
#+BEGIN_SRC emacs-lisp
  (defun package--save-selected-packages (&optional value)
    "Set and save `package-selected-packages' to VALUE."
    (when value
      (setq package-selected-packages value)))
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
  ;;; THEME ;;;
  (load "~/.emacs.d/themes/spacemacs-common.el")
  (load "~/.emacs.d/themes/spacemacs-dark-theme.elc")
  (load "~/.emacs.d/themes/spacemacs-light-theme.elc")
  (load-theme 'spacemacs-dark t)

  (defun light-mode ()
    (interactive)
    (load-theme 'spacemacs-light t))

  (defun dark-mode ()
    (interactive)
    (load-theme 'spacemacs-dark t))

  ;;; Colored parentesis ;;;
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))


  ;;; Highlight current line ;;;
  (global-hl-line-mode t)
  (set-face-foreground 'highlight nil)

  ;;; Cursor ;;;
  (setq evil-insert-state-cursor '(box "#FFA56B")
	evil-normal-state-cursor '(box "#61FFF2"))
  (blink-cursor-mode 1)
  (setq-default cursor-in-non-selected-windows nil)

  ;;; disable bars ;;;
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;;; Margin ;;; header line bg have to be the same as bg ;;;
  (set-fringe-mode 25)
  (setq-default header-line-format " ")

  ;;; DEFAULT FORMAT ;;;
  (defun mode-line-fill (face reserve)
    (when
	(and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
    (propertize " "
		'display
		`((space :align-to (- (+ right right-fringe right-margin) ,reserve)))
		'face face))

  ;;; MODE-LINE ;;;
  (setq-default mode-line-format
		(list
		 '(:eval (propertize "%b" 'face '(:weight bold)))
		 '(:eval (if (buffer-modified-p)
			     (propertize "  " 'face '(:foreground "#bd93f9" :weight bold))
			   (propertize "  " 'face '(:foreground "#bd93f9" :weight bold))))
		 '(:eval (propertize "%m" 'face '(:weight bold)))
		 '(:eval (mode-line-fill 'mode-line 9))
		 '(:eval (propertize "  " 'face '(:foreground "#bd93f9" :weight bold)))
		 '(:eval (propertize "%l" 'face '(:weight bold)))))
  (setq frame-title-format '(("[%b] %f")))

  ;;; FONT ;;;
  (add-to-list 'default-frame-alist
	       '(font . "Monego-14"))

  ;; (set-face-attribute 'default nil
  ;; 		    :family "Monego"
  ;; 		    :foundry "pyrs"
  ;; 		    :height 120
  ;; 		    :weight 'bold
  ;; 		    :width 'normal)

#+END_SRC
* buffers
#+BEGIN_SRC emacs-lisp
  (setq-default message-log-max nil)
  (when (get-buffer "*Messages*")
    (kill-buffer "*Messages*"))

  ;; switch to previous buffer
  (defun switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer)))

  (global-set-key (kbd "C-<tab>") 'switch-to-previous-buffer)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("<S-return>" . avy-goto-char-timer)
    ("<C-return>" . avy-goto-line)
    ("C-x y" . avy-copy-region)
    ("C-x w" . avy-kill-region)

    :config
    (setq avy-timeout-seconds 3.0)
    ;; Jump across different emacs buffers
    (setq avy-all-windows 'all-frames)
    )
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    ;;emacs state is i state
    (setq evil-insert-state-map (make-sparse-keymap))
    (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)

    (add-to-list 'evil-emacs-state-modes 'nav-mode)
    ;; (add-hook 'nav-mode-hook 'evil-emacs-state-modes)
    ;; (add-hook 'read-only-mode-hook 'evil-emacs-state-modes)
    ;; (add-hook 'dashboard-mode-hook 'evil-emacs-state-modes)

    (evil-set-initial-state 'dashboard-mode 'emacs)
    (evil-set-initial-state 'ibuffer-mode 'emacs)
    (evil-set-initial-state 'bookmark-bmenu-mode 'emacs)
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'sunrise-mode 'emacs)
    (evil-set-initial-state 'image-mode 'emacs)
    (evil-set-initial-state 'pdf-view-mode 'emacs)

    (define-key evil-normal-state-map (kbd "gd") 'xref-find-definitions)
    (define-key evil-normal-state-map (kbd "M-.") 'xref-find-definitions)
    (define-key evil-normal-state-map (kbd "M-,") 'xref-pop-marker-stack)

    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
    (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
    (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)


    (define-key evil-motion-state-map "'" 'evil-goto-mark)
    (define-key evil-motion-state-map "`" 'evil-goto-mark-line)

    (define-key evil-motion-state-map " " nil)
    (define-key evil-motion-state-map (kbd "SPC h") 'avy-goto-char-timer)
    (define-key evil-motion-state-map (kbd "SPC j") 'avy-goto-line-below)
    (define-key evil-motion-state-map (kbd "SPC k") 'avy-goto-line-above)
    (define-key evil-motion-state-map (kbd "SPC l") 'avy-goto-char-2)
    )
#+END_SRC
* programming
** projectile
 #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :init
     (use-package counsel-projectile
       :ensure t
       :init
       (setq projectile-completion-system 'ivy)
       (setq projectile-project-root-files #'( ".projectile" ))
       (setq projectile-project-root-files-functions #'(projectile-root-top-down
							projectile-root-top-down-recurring
							projectile-root-bottom-up
							projectile-root-local))
       )

     :config
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (counsel-projectile-mode)
     )
 #+END_SRC
** prog-styles
 #+BEGIN_SRC emacs-lisp
   (defun c-setup-comment ()
	 (setq comment-start "/*"
		   comment-end   "*/"
		   comment-multi-line t
		   comment-continue " *"
		   comment-padding 1
		   comment-style 'extra-line)
	 )

   (setq c-default-style
		 '((java-mode . "java")
		   (awk-mode . "awk")
		   (c-mode . "linux")
		   (other . "linux")))

   (defun c-setup ()
	 (c-setup-comment)
	 )


   (add-hook 'c-mode-common-hook 'c-setup)
   (add-hook 'c-mode-hook 'c-setup)
   (add-hook 'c++-mode-common-hook 'c-setup)
   (add-hook 'c++-mode-hook 'c-setup)

 #+END_SRC
** ide-features
*** eglot
  #+BEGIN_SRC emacs-lisp
    (use-package eglot
      :ensure t)

    (defvar clangd-exe (executable-find "clangd")
      "clangd executable path")

    (defun projectile-proj-find-function (dir)
      (let ((root (projectile-project-root dir)))
	(and root (cons 'transient root))))

    (defun c-eglot-enable ()
      "enable variables and hooks for eglot cpp IDE"
      (interactive)
      (setq company-backends
	    (cons 'company-capf
		  (remove 'company-capf company-backends)))
      (projectile-mode t)
      (with-eval-after-load 'project
	(add-to-list 'project-find-functions
		     'projectile-proj-find-function))
      (add-to-list 'eglot-server-programs
		   `((c++-mode) ,clangd-exe))
      (add-to-list 'eglot-server-programs
		   `((c-mode) ,clangd-exe))
      (eglot-ensure)
      )

    (add-hook 'c++-mode-hook 'c-eglot-enable)
    (add-hook 'c-mode-hook 'c-eglot-enable)
  #+END_SRC
*** eclim
  #+BEGIN_SRC emacs-lisp
    (use-package eclim
      :ensure t
      :config
      (add-hook 'java-mode-hook 'eclim-mode)
      (setq eclim-auto-save t)
      (setq eclimd-default-workspace "/run/media/bndo/USB/school/lab/inf2010/workspace")
      (setq eclimd-autostart t)
      (global-set-key (kbd "C-c C-e e") 'eclim-problems-show-errors)
      (global-set-key (kbd "C-c C-e c") 'eclim-problems-correct)
      )
  #+END_SRC
*** company
  #+BEGIN_SRC emacs-lisp
    (use-package company-jedi
      :ensure t
      )
    (use-package company-emacs-eclim
      :ensure t
      )
    (use-package company-c-headers
      :ensure t
      )
    (use-package company
      :ensure t
      :config
      (setq company-minimum-prefix-length 1)
      (setq company-idle-delay 0.5)
      (global-company-mode 1)
      (global-set-key (kbd "<backtab>") 'company-complete)

      :init
      ;; Default Back Ends
      (setq company-backends
	    '((
	       company-files
	       company-keywords
	       company-capf
	       company-jedi
	       company-yasnippet
	       company-emacs-eclim
	       ))
	    )
      )
  #+END_SRC
*** cedet
  #+BEGIN_SRC emacs-lisp
    ;; (semantic-add-system-include "/usr/include/c++/9.2.0" 'c++-mode)
    (add-hook 'c++-mode-hook 'semantic-mode)
    (add-hook 'c-mode-hook 'semantic-mode)
  #+END_SRC
** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (smartparens-global-mode)
       (global-set-key (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)
       (setq sp-escape-quotes-after-insert nil)

       (defun my-create-newline-and-allman-format (&rest _ignored)
	 "Allman-style formatting for C."
	 (interactive)
	 (progn
	   (newline-and-indent)
	   (previous-line) (previous-line) (search-forward "{") 
	   (next-line) (indent-according-to-mode)))
       (sp-local-pair '(java-mode) "{" nil :post-handlers '((my-create-newline-and-allman-format "RET")))
       (sp-local-pair '(c-mode) "{" nil :post-handlers '((my-create-newline-and-allman-format "RET")))
       (sp-local-pair '(c++-mode) "{" nil :post-handlers '((my-create-newline-and-allman-format "RET")))

       )
   #+END_SRC
* dired
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-omit-files-p t) ; Buffer-local variable
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (define-key dired-mode-map (kbd "M-p")
			  (lambda () (interactive) (find-alternate-file "..")))))

  (defun dc/dired-mode-keys ()
    "User defined keys for dired mode."
    (interactive)
    (local-set-key (kbd "K") 'dired-kill-subdir)
    )
  (add-hook 'dired-mode-hook 'dc/dired-mode-keys)
  ;;dired only showing file name
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (dired-hide-details-mode)))
  ;;preview files in dired
  (use-package peep-dired
    :ensure t
    :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
    :bind (:map dired-mode-map
		("P" . peep-dired))
    :config
    (setq peep-dired-cleanup-on-disable t)
    )
#+END_SRC
* web
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    (add-hook 'html-mode-hook 'emmet-mode)
    )

  (use-package web-mode
    :ensure t
    :config
    (add-hook 'html-mode-hook 'web-mode))
#+END_SRC
* global
#+BEGIN_SRC emacs-lisp
  ;;config files syntax
  (require 'generic-x)
  (add-to-list 'auto-mode-alist '("\\rc\\'" . conf-mode))

  (define-prefix-command 'cust-pref)
  (global-set-key (kbd"C-z") 'cust-pref)

  (defun open-term ()
    "Lists the contents of the current directory."
    (interactive)
    (call-process "gnome-terminal" nil 0 nil))

  (defun open-terminal-in-project-root ()
    "Open default terminal in the project root."
    (interactive)
    (if (projectile-project-p)
	(let ((default-directory (projectile-project-root)))
	  (open-term))
      (open-term)
      ))
  (global-set-key (kbd "C-x :") 'open-terminal-in-project-root)
  (global-set-key (kbd "C-c c") 'recompile)
  (global-set-key (kbd "C-c m") 'compile)

  (defun open-nautilus ()
    "Lists the contents of the current directory."
    (interactive)
    (call-process "nautilus" nil 0 nil "."))

  ;;y for yes
  (fset 'yes-or-no-p 'y-or-n-p)

  ;;Rebind isearch
  (global-set-key (kbd "C-c s") 'isearch-forward)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; Useful modes
  (global-auto-revert-mode t)
  (setq dired-auto-revert-buffer t)
  (save-place-mode 1)
  (add-hook 'text-mode-hook 'orgtbl-mode)
  (show-paren-mode)
  (setq-default show-trailing-whitespace t)
  (setq-default show-ws-toggle-show-tabs t)

  ;; Not sure what this is
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  ;;bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Disable Auto Save and Backup
  ;; Maybe selecting a place to dumb file instead?
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  (setq backup-directory-alist `(("." . "~/.saves")))

  ;;WINDMOVE
  ;; (when (fboundp 'windmove-default-keybindings)
  ;; (windmove-default-keybindings))
  (global-set-key (kbd "C-s-h")  'windmove-left)
  (global-set-key (kbd "C-s-l") 'windmove-right)
  (global-set-key (kbd "C-s-k")    'windmove-up)
  (global-set-key (kbd "C-s-j")  'windmove-down)

  ;;eval and replace
  (defun replace-last-sexp ()
    (interactive)
    (let ((value (eval (preceding-sexp))))
      (kill-sexp -1)
      (insert (format "%S" value))))

  (global-set-key (kbd "C-c e") 'replace-last-sexp)

  ;;backspace
  (global-set-key (kbd "C-~") 'help-command)
  (global-set-key (kbd "M-?") 'mark-paragraph)
  (global-set-key (kbd "C-h") 'delete-backward-char)
  (global-set-key (kbd "M-h") 'backward-kill-word)

  ;;SCROLL 1 LINE
  (global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 4)))
  (global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 4)))
  (global-set-key (kbd "M-<down>") (lambda () (interactive) (scroll-up 2)))
  (global-set-key (kbd "M-<up>") (lambda () (interactive) (scroll-down 2)))
  ;; (global-set-key (quote [M-down]) (quote scroll-up-line))
  ;; (global-set-key (quote [M-up]) (quote scroll-down-line))

  ;; Edit as root
  (defun er-sudo-edit (&optional arg)
    (interactive "P")
    (if (or arg (not buffer-file-name))
	(find-file (concat "/sudo:root@localhost:"
			   (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

  (global-set-key (kbd "C-x C-r") #'er-sudo-edit)

  ;;Save on focus lost
  (defun save-all ()
    (interactive)
    (save-some-buffers t))

  (add-hook 'focus-out-hook 'save-all)
  (defadvice switch-to-buffer (before save-buffer-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice projectile-find-other-file (before save-buffer-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice bookmark-jump (before save-buffer-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice other-window (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-up (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-down (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-left (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-right (before other-window-now activate)
    (when buffer-file-name (save-buffer)))

  ;;asm mode
  (defun my-asm-mode-hook ()
    ;; you can use `comment-dwim' (M-;) for this kind of behaviour anyway
    (local-unset-key (vector asm-comment-char))
    ;; asm-mode sets it locally to nil, to "stay closer to the old TAB behaviour".
    (setq tab-always-indent (default-value 'tab-always-indent)))

  (add-hook 'asm-mode-hook #'my-asm-mode-hook)


  ;;Move paragraphs
  (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
	  (exchange-point-and-mark))
      (let ((column (current-column))
	    (text (delete-and-extract-region (point) (mark))))
	(forward-line arg)
	(move-to-column column t)
	(set-mark (point))
	(insert text)
	(exchange-point-and-mark)
	(setq deactivate-mark nil)))
     (t
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
	(forward-line)
	(when (or (< arg 0) (not (eobp)))
	  (transpose-lines arg))
	(forward-line -1)))))

  (defun move-text-down (arg)
    "Move region (transient-mark-mode active) or current line
      arg lines down."
    (interactive "*p")
    (move-text-internal arg))

  (defun move-text-up (arg)
    "Move region (transient-mark-mode active) or current line
      arg lines up."
    (interactive "*p")
    (move-text-internal (- arg)))

  (global-set-key [\M-\S-up] 'move-text-up)
  (global-set-key [\M-\S-down] 'move-text-down)

  ;;; indent buffer or region
  (defun er-indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)
    (delete-trailing-whitespace)))

  (defun er-indent-region-or-buffer ()
    "Indent a region if selected, otherwise the whole buffer."
    (interactive)
    (save-excursion
      (if (region-active-p)
	  (progn
	    (indent-region (region-beginning) (region-end))
	    (message "Indented selected region."))
	(progn
	  (er-indent-buffer)
	  (message "Indented buffer.")))))

  (global-set-key (kbd "C-M-\\") #'er-indent-region-or-buffer)

  ;; zip files on dired mode
  (defvar dired-compress-files-alist
    '(("\\.tar\\.gz\\'" . "tar -c %i | gzip -c9 > %o")
      ("\\.zip\\'" . "zip %o -r --filesync %i"))
    "Control the compression shell command for `dired-do-compress-to'.

  Each element is (REGEXP . CMD), where REGEXP is the name of the
  archive to which you want to compress, and CMD the the
  corresponding command.

  Within CMD, %i denotes the input file(s), and %o denotes the
  output file. %i path(s) are relative, while %o is absolute.")
#+END_SRC
* ace-window
 #+BEGIN_SRC emacs-lisp
 (use-package ace-window
   :ensure t
   :config
   (global-set-key (kbd "C-c a") 'ace-window)
   )

#+END_SRC

* hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :config

    (defhydra hydra-zoom (global-map "<f2>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out"))

    )

  (use-package ivy-hydra
    :ensure t
    :after (ivy hydra)

    :bind
    ("C-c w" . hydra-window/body)
    ("C-c p" . hydra-projectile/body)
    ("C-c g" . hydra-gtags/body)

    :config
    (defhydra hydra-window (:color amaranth)
      "
  Hydra Window

  ^Size^                    ^Actions^            ^Split^
  ^^^^^^^------------------------------------------------------------
  _e_nlarge Horizontally    _d_elete             _v_ertically
  _E_nlarge Vertically      _D_elete Others      _h_orizontally
  _s_hrink Horizontally     _o_: Other
  _S_hrink Vertically
  _M_aximize
  _m_inimize
  _b_alance

  "
      ("v" split-window-vertically)
      ("h" split-window-horizontally)
      ("e" enlarge-window-horizontally)
      ("E" enlarge-window)
      ("s" shrink-window-horizontally)
      ("S" shrink-window)
      ("M" maxize-window)
      ("m" minimize-window)
      ("b" balance-windows)
      ("d" delete-window)
      ("D" delete-other-windows)
      ("o" other-window)
      ("q" nil "quit" :blue t))

    (defhydra hydra-projectile (:color teal)
      "
  Hydra Projectile

  ^Find^        ^Actions^      ^Buffer
  p^^^^^--------------------------------------
  _p_roject     _g_rep         _k_ill
  _f_ile        _G_it
  _d_ir         _c_ompile
  _t_ag         _r_eplace
  _o_ther       _R_egex
  ^ ^           _s_hell

  "
      ("p" counsel-projectile-switch-project)
      ("f" counsel-projectile-find-file)
      ("d" counsel-projectile-find-dir)
      ("t" projectile-find-tag)
      ("o" projectile-find-other-file)
      ("g" counsel-projectile-grep)
      ("G" counsel-projectile-git-grep)
      ("c" projectile-compile-project)
      ("r" projectile-replace)
      ("R" projectile-replace-regexp)
      ("s" projectile-run-shell)
      ("k" projectile-kill-buffers)
      ("q" nil "quit")
      )


    (defhydra hydra-gtags (:color amaranth)
      "
  Hydra Gtags

  ^Search^        ^Tags^     ^Goto^
  ^^^^^^^------------------------------------------------------------
  _d_efinitions   _c_reate   _p_op
  _r_eference     _u_ptade
  _s_ymbols
  _f_iles
  _D_wim

  "

      ("d" counsel-gtags-find-definition)
      ("r" counsel-gtags-find-reference)
      ("s" counsel-gtags-find-symbol)
      ("f" counsel-gtags-find-file)
      ("D" counsel-gtags-dwim)
      ;; There's a bug in counsel-gtags. Use pop instead
      ;;    ("b" counsel-gtags-go-backward)
      ;;    ("f" counsel-gtags-go-forward)
      ("p" counsel-gtags-pop)
      ("c" counsel-gtags-create-tags)
      ("u" counsel-gtags-update-tags)
      ("q" nil "quit" :blue t)
      )
    )
#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp
  (defun ivy-view-backtrace ()
    (interactive)
    (switch-to-buffer "*ivy-backtrace*")
    (delete-region (point-min) (point-max))
    (fundamental-mode)
    (insert ivy-old-backtrace)
    (goto-char (point-min))
    (forward-line 1)
    (let (part parts)
      (while (< (point) (point-max))
	(condition-case nil
	    (progn
	      (setq part (read (current-buffer)))
	      (push part parts)
	      (delete-region (pont-min) (point)))
	  (error
	   (progn
	     (ignore-errors (up-list))
	     (delete-region (point-min) (point)))))))
    (goto-char (point-min))
    (dolist (part parts)
      (lispy--insert part)
      (lispy-alt-multiline)
      (insert "\n")))

  (defmacro csetq (variable value)
    `(funcall (or (get ',variable 'custom-set)
		  'set-default)
	      ',variable ,value))


  (use-package ivy
    :ensure t
    :bind(
	  ("C-s" . swiper)
	  ("C-c C-r" . ivy-resume)
	  ("C-x b" .  ivy-switch-buffer)
	  :map ivy-minibuffer-map
	  ("M-<return>" . ivy-alt-done)
	  ("C-M-h" . ivy-previous-line-and-call)
	  ("C-c o" . ivy-occur)

	  :map ivy-switch-buffer-map
	  ("C-k" . ivy-switch-buffer-kill)
	  )

    :init
    (csetq ivy-display-style 'fancy)
    ;; (csetq ivy-count-format "(%d/%d) ")
    (csetq ivy-use-virtual-buffers t)
    (csetq counsel-find-file-ignore-regexp "\\`\\.")

    (setq ivy-initial-inputs-alist nil)
    (setq ivy-switch-buffer-faces-alist
	  '((emacs-lisp-mode . swiper-match-face-1)
	    (dired-mode . ivy-subdir)
	    (org-mode . org-level-4)))

    (setq ivy-re-builders-alist
	  '((t . ivy--regex-ignore-order)))
    (setq ivy-ignore-buffers '("\\` " "\\`\\*"))
    :config
    (ivy-mode 1)
    )



  (use-package counsel
    :ensure t
    :bind(
	  ("M-C-y" . counsel-yank-pop)
	  ("M-x" . counsel-M-x)
	  ("C-x C-f" . counsel-find-file)
	  ("<f1> f" . counsel-describe-function)
	  ("<f1> v" . counsel-describe-variable)
	  ("<f1> l" . counsel-find-library)
	  ("<f2> i" . counsel-info-lookup-symbol)
	  ("<f2> u" . counsel-unicode-char)
	  ;; ("C-c g" . counsel-git)
	  ("C-c j" . counsel-git-grep)
	  ;; ("C-c k" . counsel-ag)
	  ("C-x l" . counsel-locate)
	  ("C-S-o" . counsel-rhythmbox)

	  :map read-expression-map
	  ("C-r" . counsel-expression-history)
	  ("C-r" . counsel-minibuffer-history)
	  )

    :init
    (setq counsel-grep-base-command "grep -niE %s %s")
    (setq counsel-grep-base-command
	  "rg -i -M 120 --no-heading --line-number --color never %s %s")
    (setq counsel-rg-base-command
	  "rg -i -M 120 --no-heading --line-number --color never %s .")

    (setq counsel-git-grep-cmd-default
	  (concat "git --no-pager grep --full-name -n --no-color -i -e '%s' -- './*' "
		  (mapconcat (lambda (x) (format "':!*.%s'" x))
			     '("htm" "so" "a" "TTC" "NDS" "png" "md5") " ")))
    (setq counsel-fzf-dir-function
	  (lambda ()
	    (let ((d (locate-dominating-file default-directory ".git")))
	      (if (or (null d)
		      (equal (expand-file-name d)
			     (expand-file-name "~/")))
		  default-directory
		d))))

    (setq counsel-linux-apps-directories
	  '("/usr/share/applications/"
	    ))

    :config
    (ivy-set-display-transformer 'counsel-describe-function nil)
    )
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    :init
    :config
    (global-magit-file-mode)
    )
#+END_SRC
* smartrep
#+BEGIN_SRC emacs-lisp

 ;; Setting new prefix key for multiple cursors

 (define-prefix-command 'mc)
 (global-set-key (kbd"C-.") 'mc)


 (use-package smartrep
   :ensure t
   :config
   (smartrep-define-key
    global-map "C-."
    '(

      ;; Multiple cursors

      ("h" . mc/skip-to-previous-like-this)
      ("j" . mc/mark-previous-like-this)
      ("k" . mc/mark-next-like-this)
      ("l" . mc/skip-to-next-like-this)

      ("u" . mc/unmark-previous-like-this)
      ("i" . mc/unmark-next-like-this)

      ("b" . mc/insert-letters)
      ("n" . mc/insert-numbers)

      ("m" . mc/mark-all-like-this)
      ("e" . mc/edit-lines)

      ("o" . mc/mark-pop )
      ("a" . mc/vertical-align )

      ("y" . er/expand-region )
      ))
   )

 #+END_SRC

* mc
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    ;; (global-set-key (kbd "C-.")  'mc/mark-next-like-this)
    ;; (global-set-key (kbd "C-,")  'mc/mark-previous-like-this)
    ;; (global-set-key (kbd "C-:")  'mc/mark-all-like-this)
    ;; ;; (global-set-key (kbd "M-<down>")  'mc/mark-next-word-like-this)
    ;; (global-set-key (kbd "C->")  'mc/skip-to-next-like-this)
    ;; (global-set-key (kbd "C-<")  'mc/skip-to-previous-like-this)
    ;; (global-set-key (kbd "C-x C-.")  'mc/unmark-next-like-this)
    ;; (global-set-key (kbd "C-x C-,")  'mc/unmark-previous-like-this)
    ;; (global-set-key (kbd "C-x C-:")  'mc/mark-pop)
    ;; (global-set-key (kbd "M-[")  'mc/insert-numbers)
    ;; (global-set-key (kbd "M-]")  'mc/insert-letters)
    ;; ;; (global-set-key (kbd "C-c a")  'mc/vertical-align)

    )

    (use-package expand-region
    :ensure t
    )


#+END_SRC
* neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind
    ("C-`" . neotree-toggle)

    :config
    (setq neo-smart-open t)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    )
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init
    :config
    (setq org-agenda-files (list "~/Documents/School/agenda.org")))

  (use-package org-bullets
    :ensure t
    :config

    (setq org-bullets-face-name (quote org-bullet-face))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("◉" "•" "●" "▶" "►" "▸"))
    )

  (define-key org-mode-map (kbd "C-c C-a") 'org-agenda)
  (define-key org-mode-map (kbd "C-c h") 'counsel-org-goto-all)
#+END_SRC
* whichkey
#+BEGIN_SRC emacs-lisp
;; Shows possible suffix keys
(use-package which-key
  :ensure t
  :config
  (which-key-mode)
  )
#+END_SRC
* openwith
#+BEGIN_SRC emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (when (require 'openwith nil 'noerror)
      (setq openwith-associations
	    (list
	     (list (openwith-make-extension-regexp
		    '("mp4" "mkv"))
		   "mpv"
		   '(file))
	     (list (openwith-make-extension-regexp
		    '("mp3"))
		   "alacritty -e cmus"
		   '(file))
	     (list (openwith-make-extension-regexp
		    '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
		   "libreoffice"
		   '(file))
	     (list (openwith-make-extension-regexp
		    '("pdf" "ps" "ps.gz" "dvi"))
		   "zathura"
		   '(file))

	     (list (openwith-make-extension-regexp
		    '("docx"))
		   "libreoffice"
		   '(file))

	     (list (openwith-make-extension-regexp
		    '("xopp"))
		   "xournalpp"
		   '(file))

	     (list (openwith-make-extension-regexp
		    '("vcd"))
		   "gtkwave"
		   '(file))
	     ))
      (openwith-mode 1))
    )
  (setq large-file-warning-threshold nil)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1)
    )
  (use-package yasnippet-snippets
    :ensure t
    )
#+END_SRC

* all the icons
#+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure t)

    (use-package all-the-icons-dired
      :ensure t
      :config
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

    (use-package all-the-icons-ivy
      :ensure t
      :config
      (all-the-icons-ivy-setup))

#+END_SRC
